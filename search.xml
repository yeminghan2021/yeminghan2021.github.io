<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSP 2024</title>
    <url>/2024/09/27/CSP-2024/</url>
    <content><![CDATA[<p>GD-S01190/GD-S00489。</p>
<h2 id="day--2omegasim--omega">Day <span
class="math inline">\(-2\omega\sim -\omega\)</span></h2>
<p>开学了。正式成为了高一 OIer。回学校上了一周，然后就停课了。</p>
<p>去打了高联。有个唐诗做一试 T1 时在草稿纸上写下了 <span
class="math inline">\(8^{9^{2024}}=2^{27^{2024}}\)</span>，我不说是谁。椭圆双曲线啥的都忘光了。二试做完
T1T3 就对着几何题罚坐了。</p>
<p>CSP 模拟赛暴打 110pts，遗言丁真鉴定为原形毕露了。</p>
<p>如此成绩，如何 CSP？如此成绩，如何 CSP？如此成绩，如何 CSP？</p>
<h2 id="day--omega">Day <span
class="math inline">\(-\omega\)</span></h2>
<p>初赛。</p>
<p>没啥好说的。1h 速通掉了。完善程序 <span
class="math inline">\(9\)</span> 个 <span class="math inline">\(\texttt
A\)</span> 咋搞的。</p>
<p>在草稿纸上默写了《山东车牌歌》和元素周期表。<del>后来发现「鲁 M
滨州」的「滨」写成不带三点水的了</del></p>
<p>没有对答案，<del>毕竟三年前过今年不过是不是。。。</del></p>
<h2 id="day--omegasim-0">Day <span class="math inline">\(-\omega\sim
0\)</span></h2>
<p>最近 CFAT 状态经常爆炸。在上 GM 7 个月后成功地掉到了 IM。在上 3 Dan 5
个月后成功的掉到了黄名。</p>
<p>国庆模拟赛。爆！爆！爆！摆！摆！摆！魔怔！</p>
<p>比赛前几天疯狂摆烂。</p>
<p>发现高联 2= 了，但是是 2= rk11，唉 T1T2 不挂就可能 1= 了。</p>
<p>Day <span class="math inline">\(0\)</span> 开始当预言家，押了
greedy/dp/tree/ds。</p>
<h2 id="day-1">Day <span class="math inline">\(1\)</span></h2>
<p>发现考场在七楼，气喘吁吁。</p>
<p>解压密码是随机字符串。</p>
<p>开场开了个 NOI linux，可以传文件，爽！</p>
<p>看 T1。<span class="math inline">\(\max cnt\)</span> 秒了。此时是
15min。</p>
<p>看 T2。超速一定是段区间，二分加贪心秒了。此时是 45min。</p>
<p>看 T3。一眼 <span class="math inline">\(n^2\)</span>
dp，然后线段树优化完了。写写写，过样例了，此时是 1h30m。</p>
<p>把前三题扔到了虚拟机上跑。不是为啥 <code>ulimit -v</code> 和
<code>-fsanitize=address</code> 一起用会爆啊？浪费 5min，急了，把
<code>fsanitize</code> 删了。</p>
<p>看 T4。不会。</p>
<p>回去给 T3 造了组极限。我擦跑了 1.5s？我擦线段树原来是 <span
class="math inline">\(\Theta(Tn\log V)\)</span>
的？发现可以线性，改改改，0.2s 轻松通过，此时是 2h15m。</p>
<p>编了半天编出了 T4 的 <span class="math inline">\(\Theta(Tn\log
n)\)</span>，写写写，样例 2 过，样例 3 过，样例 4……WA 了？</p>
<p>发现假了。此时是 3h20m。</p>
<p>尝试改，发现要多一只 <span
class="math inline">\(\log\)</span>。不管了开改，过了所有样例。</p>
<p>测了一下 T4 效率，发现 <span class="math inline">\(T=16\)</span> 可以
0.5s 轻松跑过？</p>
<p>最后 15min 开摆了。</p>
<p>估分 <span class="math inline">\(100+100+100+76=376\)</span>。</p>
<hr />
<p>出来发现一车人 AK 了。又双叒叕被爆了 T_T</p>
<p>昨天预言的似乎只有 T1 比较准。</p>
<p>听说勾 7 线要 300+？？？不是今年真比去年简单得多吗。</p>
<h2 id="day-2simomega">Day <span
class="math inline">\(2\sim\omega\)</span></h2>
<p>Day <span class="math inline">\(2\)</span> ARC 雪耻，回橙！A
赛后补出来很好玩，B 很套路，C 很聪明，D 很 cn，E 看不懂题解。</p>
<p>Day <span class="math inline">\(3\)</span> vp 了昨天的 global
round。打得很抽象。</p>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/h0d9pmrz.png" /></p>
<p>开始玩 duel，结果分全都掉没了。。。</p>
<h2 id="day-omega">Day <span class="math inline">\(\omega\)</span></h2>
<p>最终分 <span class="math inline">\(376\)</span>，没挂！</p>
<p>小胜一把。</p>
<p>NOIP &amp; 省选 RP++！</p>
<hr />
<p>总结：</p>
<ul>
<li>一定要测蓟县数据！一定要测蓟县数据！一定要测蓟县数据！</li>
<li>假了别急！假了别急！假了别急！</li>
</ul>
]]></content>
      <categories>
        <category>游记</category>
        <category>2024-2025</category>
      </categories>
  </entry>
  <entry>
    <title>ARC 瞎做</title>
    <url>/2024/09/27/ARC-%E7%9E%8E%E5%81%9A/</url>
    <content><![CDATA[<p>范围：<span
class="math inline">\(\text{ARC}[\ge104][\text{C|D|E|F}]\land\text{Difficulty}\ge1600\)</span>。</p>
<h2 id="arc104">ARC104</h2>
<h3 id="c">C</h3>
<p>可以发现一段极小的合法区间必然是这样的一个形式：</p>
<p><span
class="math display">\[[x,x+y],[x+1,x+y+1],\ldots,[x+y-1,x+2y-1].\]</span></p>
<p>然后你直接判区间合法 dp 一下就行了。细节有点多。</p>
<h3 id="d">D</h3>
<p>考虑 dp，令 <span class="math inline">\(dp_{i,j,k}\)</span>
表示考虑了 <span class="math inline">\(1\sim i\)</span>
的所有数字，一共选了 <span class="math inline">\(j\)</span> 个，和为
<span class="math inline">\(k\)</span> 的方案数。</p>
<p><del>直接做是 <span class="math inline">\(n^7\)</span>
的过牛魔啊。。。</del></p>
<p>首先前缀和优化砍掉一个 <span
class="math inline">\(n\)</span>。然后你发现状态数就是这么多，必须优化状态数。</p>
<p>考虑求 <span class="math inline">\(x\)</span> 的答案，不妨整体平移
<span class="math inline">\(x\)</span>，那么就是 <span
class="math inline">\(1-x\)</span> 到 <span
class="math inline">\(n-x\)</span> 各 <span
class="math inline">\(k\)</span> 个，选出若干个和为 <span
class="math inline">\(0\)</span>。</p>
<p>那么设 <span class="math inline">\(dp_{i,j}\)</span> 表示考虑了 <span
class="math inline">\((1-x)\sim(i-x)\)</span> 的所有数，和为 <span
class="math inline">\(j\)</span> 的方案数。那么求单个数的答案是 <span
class="math inline">\(n^4\)</span>
的，<del>常数小也许能冲过去？</del></p>
<p>考虑正负分开算，设 <span class="math inline">\(dp_{i,j}\)</span>
表示考虑 <span class="math inline">\(1\sim i\)</span> 的所有数，和为
<span class="math inline">\(j\)</span> 的方案数。</p>
<p>那么可以发现 <span class="math inline">\(x\)</span> 的答案就是 <span
class="math inline">\(\displaystyle(k+1)\sum_{i=0}^\infty
dp_{x-1,i}\cdot
dp_{n-x,i}\)</span>。（就是正数总和等于负数绝对值总和）</p>
<p>那么时间复杂度为 <span
class="math inline">\(\Theta(n^4)\)</span>。</p>
<h3 id="e">E</h3>
<p>厉害题。看了题解才会。</p>
<p>考虑爆枚这 <span class="math inline">\(n\)</span>
个数的大小关系（<strong>可能相等</strong>），然后算出它的 LIS
长度，那么转化为求方案数。</p>
<p>发现问题变成了：</p>
<blockquote>
<p>给出 <span class="math inline">\(A\)</span>，求满足 <span
class="math inline">\(1\le a_i\le A_i\)</span>
的<strong>严格上升</strong>序列 <span class="math inline">\(a\)</span>
的数量。</p>
</blockquote>
<p>不妨假设 <span class="math inline">\(A\)</span> 不降，<span
class="math inline">\(A_0=0\)</span>。</p>
<p>设 <span class="math inline">\(dp_{i,j}\)</span> 表示将 <span
class="math inline">\(1\sim a_j\)</span> 填在 <span
class="math inline">\([1,A_i]\)</span> 中的方案数。</p>
<p>那么有转移：</p>
<p><span class="math display">\[dp_{i+1,j+k}\gets
\binom{A_{i+1}-A_i}k\cdot dp_{i,j}.\]</span></p>
<p>由于 <span class="math inline">\(k\)</span> 很小直接 <span
class="math inline">\(\Theta(k)\)</span> 算组合数即可。</p>
<p>然后就做完了。时间是 <span
class="math inline">\(\Theta(n^n\cdot\mathrm{poly}(n))\)</span>，但是多几只
<span class="math inline">\(n\)</span> 也随便冲。</p>
<h3 id="f">F</h3>
<p>不妨设 <span class="math inline">\(-1\)</span>
的位置有一个无限高的，不影响。</p>
<p>你考虑 <span class="math inline">\(p_i=j\)</span> 的限制就是 <span
class="math inline">\(p_j&gt;p_i\)</span> 且【<span
class="math inline">\(i&lt;k&lt;j\)</span> 时 <span
class="math inline">\(p_j\le p_i\)</span>】。</p>
<p>然后你考虑把笛卡尔树建出来，那么就是左儿子小于等于它的，右儿子小于它的。</p>
<p>那么枚举根就变成两个区间的子问题了，dp 即可。（设 <span
class="math inline">\(dp_{l,r,v}\)</span> 表示 <span
class="math inline">\([l,r]\)</span> 内，值域为 <span
class="math inline">\([1,v]\)</span> 的方案数。）</p>
<p>注意到无论你怎么限制也只需要 <span class="math inline">\(n\)</span>
的值域，所以状态数为 <span
class="math inline">\(\Theta(n^3)\)</span>，转移只需枚举根，所以时间复杂度为
<span class="math inline">\(\Theta(n^4)\)</span>。</p>
<h2 id="arc105">ARC105</h2>
<h3 id="c-1">C</h3>
<p>首先这题很难把骆驼状压，只能 <span class="math inline">\(n!\)</span>
爆枚。那么就不能再带一只 <span class="math inline">\(m\)</span> 了。</p>
<p>假设确定了一个顺序。现在我们要求出前后两只骆驼的最小距离。</p>
<p>考虑 dp，设 <span class="math inline">\(dp_i\)</span> 表示第一只和第
<span class="math inline">\(i\)</span> 只骆驼的最小距离。</p>
<p>转移时，考虑 <span class="math inline">\(j\sim i\)</span>
只骆驼的限制：</p>
<p><span class="math display">\[\forall p\text{ such that
}v_p&lt;\sum_{k=j}^iw_i,dp_i\ge dp_j+l_p\]</span></p>
<p>用人话说就是重量超了就必须隔得够远。</p>
<p>注意到「所有 <span class="math inline">\(v_p\)</span>
小于某个值」的位置会产生限制，那么可以按 <span
class="math inline">\(v\)</span> 从小到大排序，那么每次就是取一段前缀的
<span class="math inline">\(l\)</span>
的最大值，预处理即可。转移时直接二分出产生限制的那段前缀即可。</p>
<p>于是时间复杂度为 <span class="math inline">\(\Theta(n!n^2\log m+m\log
m)\)</span>。</p>
<h3 id="d-1">D</h3>
<p>显然根据 <span class="math inline">\(n\)</span>
的奇偶性会有一个人（设为 X）死命让异或和非 <span
class="math inline">\(0\)</span>，反之亦然。</p>
<p>那么首先如果所有的 <span class="math inline">\(cnt\)</span>
都是偶数，那么另一个人只要模仿 X 的操作就能让 X 必输。</p>
<p>反之，X
可以每次把石子数最多的那袋扔到石子数最多的盘子，那么最后那个盘子的石子数会大于总数的一半，从而使异或和非
<span class="math inline">\(0\)</span> 而获胜。</p>
<p>时间复杂度 <span class="math inline">\(\Theta(n)\)</span> 或 <span
class="math inline">\(\Theta(n\log n)\)</span>。</p>
<h3 id="e-1">E</h3>
<p><del>GameCoder。</del></p>
<p>考虑最后加不动边时的图，可以发现一定是 <span
class="math inline">\(1\)</span> 和 <span
class="math inline">\(n\)</span>
分别在两坨点组成的团里。它有多少条边呢？假设其中一坨有 <span
class="math inline">\(i\)</span> 个点：</p>
<p><span class="math display">\[\begin{aligned}
&amp;\frac{i(i-1)}2+\frac{(n-i)(n-i-1)}2\\
=&amp;\frac{i^2-i+n^2-2in+i^2+i-n}2\\
=&amp;i^2-in+\frac{n^2-n}2
\end{aligned}\]</span></p>
<p>可以发现，如果 <span class="math inline">\(n\)</span>
是奇数，那么最后边数的奇偶性是固定的，胜负已分。</p>
<p>如果 <span class="math inline">\(n\)</span>
是偶数，那么其中一个人就会死命让 <span class="math inline">\(i\)</span>
变成偶数，另一个人死命让 <span class="math inline">\(i\)</span>
变成奇数。</p>
<p>然后反正就是考虑一下镜像操作，结论就是如果先手死命抢偶数，那么当且仅当
<span class="math inline">\(1\)</span> 和 <span
class="math inline">\(n\)</span>
所在连通块大小至少有一个是偶数时先手赢；如果先手死命抢奇数，那么当且仅当有一个是奇数时先手赢。</p>
<h3 id="f-1">F</h3>
<p>这不是我们的 <a
href="https://atcoder.jp/contests/abc327/tasks/abc327_g">ABC327G</a>
吗。</p>
<p>首先你需要发现这个 good 的一坨定义说的是那个图是一个连通二分图。</p>
<p>设 <span class="math inline">\(U\)</span> 为全集，<span
class="math inline">\(f_S\)</span> 表示由 <span
class="math inline">\(S\)</span>
的导出子图组成的<strong>染色</strong>二分图的数量。（这个咋求等下再说）</p>
<p>那么参考那个题的套路，设 <span class="math inline">\(h_S\)</span>
为由 <span class="math inline">\(S\)</span>
的导出子图组成的<strong>连通染色</strong>二分图的数量。</p>
<p>那么容斥一下可以得到：</p>
<p><span class="math display">\[h_S=f_S-\sum_{\substack{T\subset
S\\\min\{S\}\in T}}h_T\cdot f_{S\backslash T}\]</span></p>
<p>而连通二分图只有两种染色方式，那么答案就是 <span
class="math inline">\(\dfrac{h_U}2\)</span>。</p>
<p>然后看怎么求 <span class="math inline">\(f_S\)</span>。</p>
<p>直接暴力枚举染色方案，那么方案数就是 <span
class="math inline">\(2^{e}\)</span>，其中 <span
class="math inline">\(e\)</span> 是连接两个异色点的边数。</p>
<p>但是暴力做是 <span class="math inline">\(\Theta(3^nm)\)</span>
的，过不去。</p>
<p>考虑优化，预处理出 <span class="math inline">\(cnt_{S,i}\)</span>
表示连接 <span class="math inline">\(i\)</span> 和 <span
class="math inline">\(S\)</span> 中任意一点的边数。</p>
<p>那么考虑递推求 <span class="math inline">\(f_S\)</span>。设 <span
class="math inline">\(res_T\)</span> 表示 <span
class="math inline">\(T\)</span> 中点染黑，其它染白，的异色边数。</p>
<p>则有 <span class="math inline">\(res_\varnothing=0\)</span>；设 <span
class="math inline">\(T\ne\varnothing\)</span>，那么令 <span
class="math inline">\(v\in T\)</span>，易得 <span
class="math inline">\(res_T=res_{T\backslash\{v\}}-cnt_{T,v}+cnt_{S\backslash
T,v}\)</span>。</p>
<p>这样就做到了 <span
class="math inline">\(\Theta(3^n+2^nm)\)</span>。</p>
<h2 id="arc106">ARC106</h2>
<h3 id="d-2">D</h3>
<p>注意到 <span
class="math inline">\((a+b)^c=\displaystyle\sum_{i=0}^c\binom
cia^ib^{c-i}\)</span>，令 <span
class="math inline">\(s_i=\displaystyle\sum_{j=1}^na_j^i\)</span>，那么就有</p>
<p><span class="math display">\[\begin{aligned}
&amp;\sum_{i=1}^n\sum_{j=i+1}^n(a_i+a_j)^x\\
=&amp;\sum_{i=1}^n\sum_{j=i+1}^n\sum_{k=0}^x\binom xka_i^ka_j^{x-k}\\
=&amp;\sum_{k=0}^x\binom xk\sum_{i=1}^na_i^k\sum_{j=i+1}^na_j^{x-k}\\
=&amp;\sum_{k=0}^x\binom xk\cdot\frac12(s_ks_{x-k}-s_x)
\end{aligned}\]</span></p>
<p>于是直接就 <span class="math inline">\(\Theta(nk+k^2)\)</span>
做完了。</p>
<h3 id="e-2">E</h3>
<p>想了半天发现是唐题。</p>
<p>你考虑二分，然后直接上 Hall 定理就等价于对于任意一个员工集合 <span
class="math inline">\(S\)</span> 都有：<span
class="math inline">\(S\)</span> 中有员工来工作的天数 <span
class="math inline">\(\ge k\cdot|S|\)</span>。</p>
<p>容斥一下就是 <span class="math inline">\(S\)</span>
里面一个也不来的天数小于某个值。</p>
<p>然后这个对于所有的 <span class="math inline">\(S\)</span>
求可以高维前缀和做到 <span
class="math inline">\(\Theta(n\cdot2^n)\)</span>。</p>
<p>不难发现答案上界是 <span
class="math inline">\(2nk\)</span>，直接预处理每天的考勤情况即可。时间复杂度
<span
class="math inline">\(\Theta(n^2k+nk\log(nk)+n2^n\log(nk))\)</span>。</p>
<h3 id="f-2">F</h3>
<p>首先一个前置知识就是：给定度数序列 <span
class="math inline">\(f\)</span>，可以构成 <span
class="math inline">\(\dfrac{(n-2)!}{\prod (f_i-1)!}\)</span>
棵不同的树。（可以通过 Prüfer 序列证明）</p>
<p>那么如果钦定每个部分的度数 <span
class="math inline">\(f\)</span>，怎么统计不同的洞带来的贡献呢？</p>
<p>从每个部分随便<strong>排列</strong> <span
class="math inline">\(f_i\)</span>
个洞，那么就可以将排列的第一个洞连到父亲，其它的依次连到儿子，可以证明这样是不重不漏的，所以方案数是
<span class="math inline">\(\dfrac{d_i!}{(d_i-f_i)!}\)</span>。</p>
<p>那么就可以列出答案的式子：</p>
<p><span class="math display">\[\begin{aligned}
&amp;\sum_{f\text{ is valid}}\frac{(n-2)!\prod
d_i!}{\prod(d_i-f_i)!(f_i-1)!}\\
=&amp;(n-2)!\left(\prod_{i=1}^nd_i\right)\sum_{f\text{ is
valid}}\prod_{i=1}^n\binom{d_i-1}{f_i-1}\
\end{aligned}\]</span></p>
<p>考虑算右边那坨东西。注意到 <span class="math inline">\(\sum
f_i=2n-2\)</span>，则 <span
class="math inline">\(\sum(f_i-1)=n-2\)</span>，考虑如下问题：</p>
<blockquote>
<p>有 <span class="math inline">\(\sum(d_i-1)\)</span>
个不同的物品，被分成了 <span class="math inline">\(n\)</span> 组，第
<span class="math inline">\(i\)</span> 组有 <span
class="math inline">\(d_i-1\)</span> 个。求从其中选出 <span
class="math inline">\(n-2\)</span> 个物品的方案数。</p>
</blockquote>
<p>一方面，那一坨东西就相当于枚举每组选了多少个，再在每组里面选。</p>
<p>另一方面，直接选和分组再选没区别，所以它等于 <span
class="math inline">\(\dbinom{\sum(d_i-1)}{n-2}\)</span>。</p>
<p>所以答案为：</p>
<p><span
class="math display">\[(n-2)!\left(\prod_{i=1}^nd_i\right)\binom{\sum(d_i-1)}{n-2}\]</span></p>
<p>时间复杂度 <span class="math inline">\(\Theta(n)\)</span>。</p>
<h2 id="arc107">ARC107</h2>
<h3 id="d-3">D</h3>
<p>这个 dp 的思路很妙啊。</p>
<p>设 <span class="math inline">\(dp_{n,k}\)</span> 表示对应的答案，则
<span class="math inline">\(n\ge k\)</span>（否则答案显然为 <span
class="math inline">\(0\)</span>）。</p>
<p>我们讨论：</p>
<ul>
<li>如果这里面有一个 <span class="math inline">\(1\)</span>，那么就是
<span class="math inline">\(dp_{n-1,k-1}\)</span>；</li>
<li>否则不妨把所有元素乘 <span
class="math inline">\(2\)</span>，那么就是 <span
class="math inline">\(dp_{n,2k}\)</span>。</li>
</ul>
<p>然后就做完了。<span class="math inline">\(\Theta(n^2)\)</span>。</p>
<h3 id="e-3">E</h3>
<p>纯结论题啊。。。</p>
<blockquote>
<p>Lemma：对于任意的 <span class="math inline">\(4\le
i,j&lt;n\)</span>，有 <span
class="math inline">\(a_{i,j}=a_{i+1,j+1}\)</span>。</p>
<p><del>Proof</del>：</p>
<p>你发现只要某一行 <span class="math inline">\(&gt;1\)</span>
列的位置出了个 <span class="math inline">\(0\)</span>，后面 <span
class="math inline">\(2\)</span> 列起就一定满足条件了。</p>
<p>然后你发现第 <span class="math inline">\(3\)</span> 行起两个 <span
class="math inline">\(0\)</span> 就最多隔 <span
class="math inline">\(2\)</span> 个位置……</p>
<p>然后就感性理解……</p>
<p>你也可以写个暴力验证一下 <span
class="math inline">\(5\times5\)</span> 的网格……</p>
</blockquote>
<p>然后你爆算前四行前四列就 <span
class="math inline">\(\Theta(n)\)</span> 了……</p>
<h3 id="f-3">F</h3>
<p>抽象网络流。</p>
<p>绝对值搁在那很难受，考虑换个说法：把它们赋一个（相同的）<span
class="math inline">\(1\)</span> 或 <span
class="math inline">\(-1\)</span> 的权值，和的最大值。</p>
<p>这样就舒服多了：最大值就是很能流的样子；连通块的和，其实就是赋的权值全一样；进一步地，就是相邻的两个结点权值必须一样。</p>
<p>那么此时每个结点有三种状态：赋 <span
class="math inline">\(1\)</span>，赋 <span
class="math inline">\(-1\)</span>，被删掉。</p>
<p>考虑最小割，总价值减去最小要移除的贡献：你对一个结点建两个点 <span
class="math inline">\(X,Y\)</span>，连一条边 <span
class="math inline">\(X\to Y\)</span>，然后设 <span
class="math inline">\(Y\)</span> 在 <span
class="math inline">\(S\)</span> 集代表赋 <span
class="math inline">\(1\)</span>，<span class="math inline">\(X\)</span>
在 <span class="math inline">\(T\)</span> 集表示赋 <span
class="math inline">\(-1\)</span>，否则表示删掉。</p>
<p>然后你随便处理一下限制就完了……</p>
<h2 id="arc108">ARC108</h2>
<h3 id="d-4">D</h3>
<p>不妨设 <span class="math inline">\(c_\texttt{ab}=\texttt
a\)</span>，则第一步只能是 <span
class="math inline">\(\texttt{aab}\)</span>。</p>
<p>此时如果 <span class="math inline">\(c_\texttt{aa}=\texttt
a\)</span>，不难发现只能生成 <span
class="math inline">\(\texttt{aaa}\ldots\texttt{ab}\)</span>，答案为
<span class="math inline">\(1\)</span>。</p>
<p>否则还可以生成 <span
class="math inline">\(\texttt{abab}\)</span>，此时讨论：</p>
<ul>
<li>如果 <span class="math inline">\(c_\texttt{ba}=\texttt
a\)</span>，则可得最终串中只需不存在相邻的两个 <span
class="math inline">\(\texttt b\)</span>，答案是斐波那契数列。</li>
<li>如果 <span class="math inline">\(c_\texttt{ba}=\texttt
b\)</span>，则最终串只需有前缀 <span class="math inline">\(\texttt
a\)</span> 和后缀 <span
class="math inline">\(\texttt{ab}\)</span>，答案为 <span
class="math inline">\(2\)</span> 的幂。</li>
</ul>
<p>（以上结论读者自证不难。）</p>
<p>时间复杂度可以做到 <span class="math inline">\(\Theta(\log
n)\)</span>。</p>
<h3 id="e-4">E</h3>
<p>容易发现选出一个位置后左右独立，所以设 <span
class="math inline">\(dp_{l,r}\)</span> 为 <span
class="math inline">\(l-1\)</span> 和 <span
class="math inline">\(r+1\)</span> 都已选中，<span
class="math inline">\([l,r]\)</span> 内都还未选中时，<span
class="math inline">\([l,r]\)</span> 内的期望贡献。</p>
<p>令设 <span class="math inline">\(S_{l,r}=\{p\in \mathbb N\mid l\le
p\le
r,a_{l-1}&lt;a_p&lt;a_{r+1}\}\)</span>，即区间内合法的凳子的集合。</p>
<p>则容易列出转移方程：</p>
<p><span
class="math display">\[dp_{l,r}=\begin{cases}0,&amp;S_{l,r}=\varnothing\\\displaystyle\frac1{|S_{l,r}|}\sum_{i\in
S_{l,r}}1+dp_{l,i-1}+dp_{i+1,r},&amp;S_{l,r}\ne\varnothing\end{cases}\]</span></p>
<p>对于每一项在值域上树状数组优化即可做到 <span
class="math inline">\(\Theta(n^2\log n)\)</span>。</p>
<h3 id="f-4">F</h3>
<p>考虑转换成对于每个 <span class="math inline">\(x\)</span> 计算 <span
class="math inline">\(\mathrm{niceness}\ge x\)</span> 的方案数。</p>
<p>考虑充要条件：上式不成立当且仅当距离 <span class="math inline">\(\ge
x\)</span> 的点对全部异色。</p>
<p>如果直径长度 <span class="math inline">\(&lt;x\)</span>
显然不可能成立。</p>
<p>如果有一个点到直径两端的距离都 <span class="math inline">\(\ge
x\)</span>，那么直径长度也 <span class="math inline">\(\ge
x\)</span>，显然必定成立。</p>
<p>否则一个点最多和一个直径端点距离 <span class="math inline">\(\ge
x\)</span>。考虑距离 <span class="math inline">\(\ge x\)</span>
的点对连一条边，那么不成立相当于这个图被二分图染色。</p>
<p>这个图的形状显然是直径两端各挂了一坨点，加上一坨孤立点。求孤立点数量也是好做的，直接
bfs 一下算一下到直径端点最短距离就行了。</p>
<h2 id="arc109">ARC109</h2>
<h3 id="d-5">D</h3>
<p>人类智慧 + 打表大法 题，无法理解，咕。</p>
<h3 id="e-5">E</h3>
<p>结论很神仙：</p>
<blockquote>
<p>如果两边颜色一样最后肯定全是那种，否则看两个最靠边的连通块哪个离初始点远，远的种颜色就只有那一段。</p>
</blockquote>
<p>证明略。</p>
<p>然后你考虑两边差的是哪一部分，注意到大多数都会被对称掉，那么剩下的就是距离相等的情况，这种情况必然是黑棋得到中间的。</p>
<p>然后再进行一堆 dirty 的推式子，你会得到一个对于钦定的起点的式子。</p>
<p>然后你发现这玩意每一位都是前一位加了一项，直接递推即可。<span
class="math inline">\(\Theta(n)\)</span>。</p>
<h3 id="f-5">F</h3>
<p>没做，咕。</p>
]]></content>
      <categories>
        <category>solutions</category>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>duel records</title>
    <url>/2024/10/29/duel-%E8%AE%B0/</url>
    <content><![CDATA[<p>感觉最近不 duel
就完全没法集中精力做题。。。<del>我才不会告诉你我写这东西也是因为不想做题。</del></p>
<p>初始 rating：<span
class="math inline">\(\color{orange}{2368}\)</span>。</p>
<h3 id="cf1438c-engineer-artem-2000">#1 <a
href="https://codeforces.com/contest/1438/problem/C">CF1438C Engineer
Artem</a> (*2000)</h3>
<p><span
class="math inline">\({\color{red}\texttt{Lose}},{\color{orange}{}^{2368}}\searrow\color{orange}{}_{2240}\)</span>。</p>
<p>对面那哥们 3min 秒了，我脑子没转过弯来。</p>
<p>其实是唐题，你直接黑白染色，黑点变奇数白点变偶数就完了。</p>
<h3 id="cf698c-lru-2400">#2 <a
href="https://codeforces.com/contest/698/problem/C">CF698C LRU</a>
(*2400)</h3>
<p><span
class="math inline">\({\color{green}\texttt{Win}},{\color{orange}{}_{2240}}\nearrow\color{orange}{}^{2264}\)</span>。</p>
<p>匹配到了 lbw 大神。</p>
<p>直接考虑倒序操作，一个东西进去就不动了。</p>
<p>那么直接状压哪些东西已经进去了，然后 dp 计算其概率，进到 <span
class="math inline">\(k\)</span> 个就统计贡献即可。</p>
<p>注意如果没东西能进（剩下的概率全是 <span
class="math inline">\(0\)</span>）也要返回。<del>因为这个 corner case
挂了 3 发</del></p>
<h3 id="cf350e-wrong-floyd-2200">#3 <a
href="https://codeforces.com/contest/350/problem/E">CF350E Wrong
Floyd</a> (*2200)</h3>
<p><span
class="math inline">\({\color{green}\texttt{Win}},{\color{orange}{}_{2264}}\nearrow\color{orange}{}^{2284}\)</span>。（eps
的优势）</p>
<p><del>考的是你有没有很好地理解 Floyd。</del></p>
<p>首先那 <span class="math inline">\(k\)</span>
个点本身是没用的，直接按 <span class="math inline">\(1\sim k\)</span>
做然后对应过去就行了。</p>
<p><span class="math inline">\(k=n\)</span> 显然是对的。下设 <span
class="math inline">\(k&lt;n\)</span>。</p>
<p>考虑 Floyd 算法，做完 <span class="math inline">\(k\)</span>
轮本质上是计算了以 <span class="math inline">\(1\sim k\)</span>
为中转点时的距离。</p>
<p>先钦定两个点使它们的距离挂掉。注意到 <span class="math inline">\(\le
k\)</span> 的点会使对它进行的那一轮无效，所以不妨选择 <span
class="math inline">\(1,2\)</span>。</p>
<p>显然 <span class="math inline">\(1,2\)</span> 间不能有边。</p>
<p>吗德不会讲了，反正边数上界是 <span
class="math inline">\(m\le\frac{n(n-1)}2-k+1\)</span>，构造是 <span
class="math inline">\(2\sim n\)</span> 连完全图，<span
class="math inline">\(1\)</span> 向 <span
class="math inline">\((k+1)\sim n\)</span>
连边。小于上界随便删点边即可。</p>
<h3 id="cf1059e-split-the-tree-2400">#4 <a
href="https://codeforces.com/contest/1059/problem/E">CF1059E Split the
Tree</a> (*2400)</h3>
<p><span
class="math inline">\({\color{red}\texttt{Lose}},{\color{orange}{}^{2284}}\searrow\color{orange}{}_{2191}\)</span>。（比对面晚
eps 分钟交，结果还挂了好几发。）</p>
<p>唐题，咋想了半天写了半天。</p>
<p>实际上一个点被盖多次也可以把一些链缩回去来达到恰好一次。所以可以当每个点<strong>至少覆盖一次</strong>。</p>
<p>注意到如果一个点为一条链的下端点，那上端点肯定越往上越优。这个上端点直接倍增啥的算下就行了。</p>
<p>然后易证从下往上贪就是对的。（一个点没被它的子树盖住就必须从它往上盖）</p>
<h3 id="cf1628d2-game-on-sum-hard-version-2400">#5 <a
href="https://codeforces.com/contest/1628/problem/D2">CF1628D2 Game on
Sum (Hard Version)</a> (*2400)</h3>
<p><span
class="math inline">\({\color{green}\texttt{Win}},{\color{orange}{}_{2191}}\nearrow\color{orange}{}^{2204}\)</span>。</p>
<p>对面好像是个题解管理……？还跟我互关了……？上一场的对手还凑热闹来交这题了……？</p>
<p>首先 <span class="math inline">\(k\)</span>
没用，单纯乘了个系数。可以当 <span class="math inline">\(k=1\)</span>
做。</p>
<p>考虑 dp，<span class="math inline">\(dp_{n,m}\)</span> 表示 <span
class="math inline">\(n,m\)</span> 的答案。</p>
<p>不难写出转移</p>
<p><span class="math display">\[dp_{n,m}=\max_{0\le x\le
1}\min\{dp_{n-1,m-1}+x,dp_{n-1,m}-x\}\]</span></p>
<p>（其中 <span class="math inline">\(x\)</span> 是实数，如果 <span
class="math inline">\(m&lt;0\)</span> 或 <span
class="math inline">\(m&gt;n\)</span> 就是 <span
class="math inline">\(+\infty\)</span>。）</p>
<p>然后就能过 easy ver 了。</p>
<p>考虑优化，不难发现 <span
class="math inline">\(dp_{n,0}=0,dp_{n,n}=n\)</span>。</p>
<p>然后看转移式：如果 <span
class="math inline">\(dp_{n-1,m}-dp_{n-1,m-1}\le 2\)</span>，那么显然有
<span
class="math inline">\(dp_{n,m}=\dfrac12(dp_{n-1,m}+dp_{n-1,m-1})\)</span>。</p>
<p>然后这个条件是成立的，证明留作习题。</p>
<p>那么考虑计算每个 <span class="math inline">\((i,i)\)</span>
对答案的贡献（实际上还有 <span class="math inline">\((i,0)\)</span>
的，但是因为是 <span class="math inline">\(0\)</span> 可以忽略掉）。</p>
<p>那么转化成：<span class="math inline">\((i,j)\)</span> 可以走到 <span
class="math inline">\((i-1,j)\)</span> 或 <span
class="math inline">\((i-1,j-1)\)</span>，求 <span
class="math inline">\((n,m)\)</span> 首次走到 <span
class="math inline">\(x=y\)</span> 的位置是 <span
class="math inline">\((i,i)\)</span> 的方案数。</p>
<p>这玩意显然就是一堆组合数，贡献就乘一个 <span
class="math inline">\(2\)</span> 的负几次方就行。时间复杂度 <span
class="math inline">\(\Theta(n)\)</span>。</p>
]]></content>
      <categories>
        <category>solutions</category>
        <category>CodeForces</category>
      </categories>
  </entry>
  <entry>
    <title>NOIP 2024</title>
    <url>/2024/11/24/NOIP-2024/</url>
    <content><![CDATA[<h2 id="day--">Day -??</h2>
<p>CSP-S <span class="math inline">\(376\)</span>，GD
rk16。也是把准考证号干到 <strong>GD-0020</strong> 了。</p>
<p>考点：gdfz 3 考场 48 号。</p>
<p>模拟赛打得一天比一天爆。怎么打感觉也进不了队。你见过 NOI <span
class="math inline">\(455\)</span>，CSP-S 模拟 <span
class="math inline">\(110\)</span>，NOIP 模拟 <span
class="math inline">\(80\)</span>
的吗？？？<del>好吧你见过，这是我。</del></p>
<h2 id="day--1">Day -1</h2>
<p>回到了抢州。</p>
<p>试图二刷 建造军营 结果二次破防了。写牛魔，摆！（flag 1）</p>
<h2 id="day-0">Day 0</h2>
<p>在 CF 上发了<a
href="https://codeforces.com/blog/entry/136683?#comment-1222411">我想 AK
NOIP</a>。</p>
<p>打完 NOIP 晚上还有 ABC &amp; CF 1+2：爽！！</p>
<h2 id="day-1">Day 1</h2>
<p>开题：</p>
<p>T1
有点神秘，糊了个贪心糊了个一点也不严谨的证明就开打，过了样例就扔了。</p>
<p>T2，不是哥们，谁家 J 组 T2 扔这来了。此时是 9:15。</p>
<p>T3，一堆团连成一个树状物求 dfs 序数量。发现每个团内是一条链。发现 AB
性质送的，<span class="math inline">\(k=1\)</span>
送的。暂时没思路了。</p>
<p>T4，发现区间 <span class="math inline">\(\operatorname{lca}\)</span>
可以 <span class="math inline">\(\Theta(n\log n+q)\)</span>，32
分送的。</p>
<p>T3，发现可以容斥做到 <span
class="math inline">\(\Theta(T2^kn)\)</span>，现在有 64 分了。</p>
<p>现在大概 10:30，已经 296 分了，看起来很赢！（flag 2）</p>
<p>并没有立刻写，而是打算冲正解。（flag 3）</p>
<p>然后……对着 T3 编了个树形 dp，然后…………</p>
<p>错。修。错。修。错。修。</p>
<p>12:20。发现 T3 假光了。</p>
<p>删掉。删掉。删掉。不，是不是还能……</p>
<p>还 ** 的修个 der 啊！！！拼部分分啊！！！</p>
<p>12:52 T3 终于调出了 64 分。</p>
<p>不测 linux 了！写 T4！12:53，12:54，12:55，12:56，</p>
<p>写牛魔啊！看看 freopen，加了，关了，盯着表。</p>
<p>12:57。</p>
<hr />
<p>100+100+64+0。</p>
<p>大家全都 340，360 什么什么的。</p>
<p>悬着的心终于死了。</p>
<hr />
<p>躺到床上。憋不住了。</p>
<p>不断对自己说「只差个大几十分，省选翻盘还是有希望的」「CSP-S
发挥不完全，NOIP 完全不发挥，省选必完全发挥」。</p>
<p>尽管心里知道只是在安慰自己。</p>
<hr />
<p>晚上 CF 倒是回 grandmaster 了，但是谁让你 NOIP 给 CF 攒 RP
了？？？？</p>
<h2 id="day-2---day">Day 2 - Day ?</h2>
<p>把 lg 签名改成了「三分联注定，七分选打拼」。</p>
<p>CF 又被 speedforces 拽回 IM 了，看来 RP 并没有被吃（bushi</p>
<h2 id="day">Day ?</h2>
<p>没有挂分，也没有反向挂分。</p>
<p>不幸中的万幸吧，省选起码还能垂死挣扎一下（？</p>
<p>队线听人说 340，看来要翻的并没有那么多（？</p>
<p>省选让我完全发挥好吗。我真的好想打 NOI 啊。</p>
<hr />
<h2 id="总结">总结</h2>
<ul>
<li>Flag 1：哼，没想到吧！我 NOIP
又出这种题辣！！！你就等死吧！！！</li>
<li>Flag
2：不要半场开香槟好吗？不要半场开香槟好吗？？不要半场开香槟好吗？？？</li>
<li>Flag 3：<span class="math inline">\(70+55&gt;100+15\)</span>
这个道理你懂不懂啊？？？</li>
</ul>
]]></content>
      <categories>
        <category>游记</category>
        <category>2024-2025</category>
      </categories>
  </entry>
  <entry>
    <title>THUPC 2025 单开记</title>
    <url>/2024/12/12/THUPC-2025-%E5%8D%95%E5%BC%80%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="day--">Day -?</h2>
<p>问了一下一起训练的人，没一个想打/来打的。</p>
<p>于是喜提一缺二。</p>
<p>队名：<code>1v3er</code></p>
<h2 id="day-1">Day 1</h2>
<p>0:00 开始！</p>
<p>一眼丁真 M 是签到，<strong>0:01</strong> 过了。</p>
<p><del>之后就完全是跟榜了。</del></p>
<p>然后随机扫了几眼题，看到 C 有人过，就去看 C。</p>
<p>想了几分钟得出结论是 <span class="math inline">\(\max(\text{全局第 3
小},\text{和 }a_x\text{ 相邻的数中的第 2 小})\)</span>。</p>
<p>然后因为第二小写成第二大而挂一发。<strong>0:17</strong>
改完过了。</p>
<p>然后发现好几个题都有人过了。随机想了一会题。</p>
<p>这个 L 为啥几分钟就有人过了？为啥我一点不会？</p>
<p>发现 J 是「与黑点相邻的点至少与一个白点相邻」。这不直接瞎树形 dp
吗。</p>
<p>写完发现 WA 了。然后发现我 dp
的东西根本不是我设的状态。<strong>0:43</strong> 改完过了。</p>
<p>然后看了一眼 I。这不直接 <span
class="math inline">\(\Theta(11n)\)</span> dp 吗。</p>
<p>然后因为「打了 <span class="math inline">\(2\)</span> 局比赛，比分是
<span class="math inline">\(10:10\)</span>」这种 corner case 而 WA
了一发。<strong>0:55</strong> 改完过了。</p>
<p>为啥我还是不会 L 啊？？？看着像 <span
class="math inline">\(\Theta(\frac{n^2}w)\)</span>，但是我连个 P
都不会？</p>
<p>看 D。发现 <span class="math inline">\(\Theta(n\log W)\)</span>
次分配之后一定会变成 <span class="math inline">\(n\)</span>
个人轮流拿。</p>
<p>那不是直接上个 <code>pq</code> 就行了吗？</p>
<p>01:25 过样例，发现 WA 了。发现中间运算可能爆
<code>long long</code>。改成了 <code>__int128</code>。然后 TLE 了。</p>
<p><del>我就知道俩烙鸽过不去。。。</del></p>
<p>发现有单调性，可以把 <code>pq</code> 换成三个
<code>queue</code>，分别维护拿到 <span
class="math inline">\(0\)</span>、<span
class="math inline">\(1\)</span>、<span class="math inline">\(\ge
2\)</span> 个的人。改改改，然后又写挂了两发。<strong>1:48</strong>
过了。</p>
<p>现在还剩 A, G, H, L 几个题过的人比较多。</p>
<p>H 是大 DS，我一个人怎么可能写的动，暂时扔掉。A 题看着是神秘 DP，G
题是神秘博弈论，L 不知道。</p>
<p>决定想 L，然后转成了另类最小割，然后转成了二分图最大独立集。</p>
<p>不是哥们，你 <span class="math inline">\(\Theta(n)\)</span> 个点
<span class="math inline">\(\Theta(n^2)\)</span>
条边（尽管可以缩起来）的图，跑牛魔匈牙利啊？</p>
<p>然后愣了整整几分钟：WC，这不是直接 Dinic 没了吗？</p>
<p>偷了个 Dinic 板子，然后 1A 了。此时是 <strong>2:34</strong>。</p>
<p>看了下 G 过的人最多，遂看 G。这真好做吗？</p>
<p>感觉需要直接想策略。然后推了半天，推出了一个看起来不太真的策略。</p>
<p>写了一下，过样例了，奶了一口会 WA，交上去，过了！此时是
<strong>3:39</strong>。</p>
<p>最后 80min，决定冲 A。</p>
<p>想了半天才转化成区间 dp，然后发现是 <span
class="math inline">\(\Theta(n^5)\)</span> 的。虽然带了 <span
class="math inline">\(\frac 1{12}\)</span> 的常数但显然是不可能过 <span
class="math inline">\(150\)</span> 的。</p>
<p>组合意义感觉优化不动，有点急了，列出了转移方程，发现可以提出一个东西出来，然后就
<span class="math inline">\(\Theta(n^4)\)</span> 了！</p>
<p>开写，<strong>4:53</strong> 过了样例，提交，AC 了！</p>
<p>剩 7min 肯定啥也干不了了，遂摆烂。</p>
<hr />
<p>最终战绩为 <strong>8 / 17:14:16 / rk156</strong>。</p>
<p>感觉作为单挑这个题数已经不少了。<del>如果来一两个水平差不多的队友可能就能进决赛了。</del></p>
<p>H 题看着吓人，实际上可以简单地发现 next 的总变化不超过 <span
class="math inline">\(\Theta(n\log n)\)</span>，可能也没那么难？</p>
<p>总结：明年得凑齐必有我师焉再打。</p>
]]></content>
      <categories>
        <category>游记</category>
        <category>XCPC</category>
      </categories>
  </entry>
  <entry>
    <title>[ABC387G] Prime Circuit</title>
    <url>/2025/01/04/ABC387G-Prime-Circuit/</url>
    <content><![CDATA[<h2 id="statements">Statements</h2>
<p>给定 <span class="math inline">\(n\)</span>，求满足下列条件的 <span
class="math inline">\(n\)</span>
点有标号、连通、简单、无向图的数量：</p>
<blockquote>
<p>对于该图中任意不重复经过某条<strong>边</strong>的环，其长度都为<strong>质数</strong>。</p>
</blockquote>
<p>Data range：<span
class="math inline">\(n\le2.5\times10^5\)</span>。</p>
<p>Time limit：<strong>12s</strong>。</p>
<h2 id="solution">Solution</h2>
<p>首先肯定要刻画一下这图长啥样。</p>
<p>考虑一个边双的形状。</p>
<blockquote>
<p>Lemma：一个边双必然是一个环或一个单点。</p>
<p>Proof：如果不是，那么至少有两个环。</p>
<p>考虑随便拿出两个相交于一条链的环（链可能退化成点）。那么这条链有两个端点
<span class="math inline">\(x,y\)</span>。</p>
<p>画个图就能得知，此时 <span class="math inline">\(x,y\)</span>
之间存在三条互不相交的路径，设其长度为 <span
class="math inline">\(a,b,c\)</span>。（如果 <span
class="math inline">\(x=y\)</span>，那么有一个是 <span
class="math inline">\(0\)</span>。）</p>
<p>此时容易至少发现存在三个长分为 <span
class="math inline">\(a+b,b+c,c+a\)</span> 的环。</p>
<p>显然环长不可能为 <span
class="math inline">\(2\)</span>，所以环长为奇（质）数，所以其和也是奇数。但又有环长之和等于
<span class="math inline">\((a+b)+(b+c)+(c+a)=2(a+b+c)\)</span>
是偶数，矛盾！</p>
</blockquote>
<p>考虑钦定所有环长为 <span
class="math inline">\(l_1,l_2,\ldots,l_k\)</span>，然后计数：</p>
<ul>
<li>每个环有 <span
class="math inline">\(\dfrac{(l_i-1)!}{2-[l_i=1]}\)</span> 种方案；</li>
<li>将这些环连成一棵树（因为边双缩起来是树），根据<a
href="https://oi-wiki.org/graph/prufer/#%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%96%B9%E6%A1%88%E6%95%B0">这里</a>的结论可以得到方案数为
<span class="math inline">\(n^{k-2}\cdot\prod l_i\)</span>；</li>
<li>分配环中的点，这个就是一堆组合数。</li>
</ul>
<p>然后就可以考虑 dp。</p>
<p>令 <span class="math inline">\(dp_i\)</span> 表示还剩 <span
class="math inline">\(i\)</span> 个点时，方案数乘 <span
class="math inline">\(n^2\)</span>（这样那个幂就变成了 <span
class="math inline">\(n^k\)</span>）的值。</p>
<p>那么不难列出转移方程：</p>
<p><span class="math display">\[dp_i=\sum_{\substack{(j\in\mathbb P\land
j\ne2)\lor j=1\\i+j\le
n}}\binom{i+j-1}{j-1}\cdot\frac{(j-1)!}{2-[j=1]}\cdot j\cdot n\cdot
dp_{i+j}\]</span></p>
<p>其中组合数是分配点；<span class="math inline">\(n\)</span> 是对 <span
class="math inline">\(n^k\)</span> 的贡献。初值为 <span
class="math inline">\(dp_n=1\)</span>；答案即为 <span
class="math inline">\(\dfrac{dp_0}{n^2}\)</span>。</p>
<p>由结论可知 <span class="math inline">\(|\mathbb P|=\Theta\left(\dfrac
n{\log
n}\right)\)</span>；所以总复杂度为 <span
class="math inline">\(\Theta\left(\dfrac{n^2}{\log
n}\right)\)</span>。</p>
<p>这玩意写的时候注意一下常数就可以通过了。</p>
<ul>
<li>什么？你说 <span class="math inline">\(o(n^{1.99})\)</span>
做法？我太菜，不会。</li>
</ul>
<h2 id="code">Code</h2>
<p>在 AT 机子上跑了 10.66s，还是需要一点卡常。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author: YE Minghan</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PB emplace_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PPB pop_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(Name) Name.begin(),Name.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GI greater<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD=<span class="number">998244353</span>,N=<span class="number">250005</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> fac[N],ifac[N];</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pw</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y=MOD<span class="number">-2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> r=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>)r=<span class="number">1ll</span>*r*x%MOD;</span><br><span class="line">		x=<span class="number">1ll</span>*x*x%MOD,y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> p[N];</span><br><span class="line">VI S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">//	int _;cin&gt;&gt;_;while(_--)</span></span><br><span class="line"></span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fac[i]=<span class="number">1ll</span>*fac[i<span class="number">-1</span>]*i%MOD,p[i]=<span class="number">1</span>;</span><br><span class="line">	ifac[n]=<span class="built_in">pw</span>(fac[n]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;~i;i--)ifac[i]=(i<span class="number">+1ll</span>)*ifac[i<span class="number">+1</span>]%MOD;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">if</span>(p[i])</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=i&lt;&lt;<span class="number">1</span>;j&lt;=n;j+=i)p[j]=<span class="number">0</span>;</span><br><span class="line">	S.<span class="built_in">PB</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">if</span>(p[i])S.<span class="built_in">PB</span>(i);</span><br><span class="line">	dp[n]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;~i;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j:S)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(i+j&gt;n)<span class="keyword">break</span>;</span><br><span class="line">			dp[i]=(dp[i]+(<span class="number">1ll</span>+(j==<span class="number">1</span>))*fac[i+j<span class="number">-1</span>]*j%MOD*dp[i+j])%MOD;</span><br><span class="line">		&#125;</span><br><span class="line">		dp[i]=<span class="number">1ll</span>*dp[i]*n%MOD*ifac[i]%MOD*(MOD<span class="number">+1</span>&gt;&gt;<span class="number">1</span>)%MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="number">1ll</span>*dp[<span class="number">0</span>]*<span class="built_in">pw</span>(n,MOD<span class="number">-3</span>)%MOD&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>solutions</category>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>[ABC389G] Odd Even Graph</title>
    <url>/2025/01/18/ABC389G-Odd-Even-Graph/</url>
    <content><![CDATA[<h2 id="statement">Statement</h2>
<p>给定偶数 <span class="math inline">\(n\)</span>，对于 <span
class="math inline">\(i=n-1,n,\ldots,\frac{n(n-1)}2\)</span>
解决以下问题：</p>
<blockquote>
<p>求满足以下条件的 <span class="math inline">\(n\)</span> 点 <span
class="math inline">\(i\)</span> 边无向连通简单图数量：</p>
<ul>
<li>到 <span class="math inline">\(1\)</span>
的最短路为奇数的结点个数等于到 <span class="math inline">\(1\)</span>
的最短路为偶数的结点个数。</li>
</ul>
</blockquote>
<p>Data range：<span class="math inline">\(n\le 30\)</span>，5s。</p>
<h2 id="solution">Solution</h2>
<p>考虑按最短路一层层 dp。看看需要记什么：</p>
<ul>
<li>当前层的最短路 <span class="math inline">\(i\)</span>；</li>
<li>目前为止扩展到的点数 <span class="math inline">\(j\)</span>；</li>
<li>当前偶奇最短路数量之差 <span class="math inline">\(k\)</span>；</li>
<li>当前层结点个数 <span
class="math inline">\(l\)</span>（转移时要用）；</li>
<li>目前为止连的边数 <span class="math inline">\(m\)</span>。</li>
</ul>
<p>那么就得到了 <span class="math inline">\(dp_{i,j,k,l,m}\)</span>
的状态。</p>
<p>显然初值为 <span
class="math inline">\(dp_{0,1,1,1,0}=1\)</span>，答案为 <span
class="math inline">\(dp_{*,n,0,*,i}\)</span>；考虑从 <span
class="math inline">\(dp_{i,j,k,l,m}\)</span> 转移。</p>
<p>枚举下一层的点数 <span class="math inline">\(o\)</span> 和新连的边数
<span class="math inline">\(p\)</span>，则转移到 <span
class="math inline">\(dp_{i+1,j+o,k+(-1)^{i+1}\cdot
o,o,m+p}\)</span>。考虑转移系数：</p>
<ul>
<li>有 <span class="math inline">\(\binom{n-j}o\)</span> 种方法选择这
<span class="math inline">\(o\)</span> 个点；</li>
<li>显然第 <span class="math inline">\(i-1\)</span>
层以前不可能向新层连边；那么相当于第 <span
class="math inline">\(i\)</span> 层的第 <span
class="math inline">\(l\)</span> 个点和新层的 <span
class="math inline">\(o\)</span> 个点加上新层内部连的边一共连 <span
class="math inline">\(p\)</span> 条的方案数，记为 <span
class="math inline">\(f_{l,o,p}\)</span>。</li>
</ul>
<p>那么转移系数就是 <span class="math inline">\(\binom{n-j}o\cdot
f_{l,o,p}\)</span>。</p>
<p>下面计算 <span class="math inline">\(f\)</span> 值，考虑 <span
class="math inline">\(f_{x,y,z}\)</span>。</p>
<p>枚举新层内部的边数（显然这里没有任何限制），那么设 <span
class="math inline">\(g_{x,y,z}\)</span> 为 <span
class="math inline">\(i,i+1\)</span> 层各有 <span
class="math inline">\(x,y\)</span> 个点时，之间连 <span
class="math inline">\(z\)</span> 条边的方案数，则有</p>
<p><span
class="math display">\[f_{x,y,z}=\sum_{i=0}^{y(y-1)/2}\binom{y(y-1)/2}ig_{x,y,z-i}\]</span></p>
<p>（此处 <span class="math inline">\(i\)</span>
仅为循环变量，与状态里的 <span class="math inline">\(i\)</span>
无关）</p>
<p>但是注意，不同层连边有限制——如果 <span
class="math inline">\(i+1\)</span>
层一个点一条边也没往外连，那么它的最短路就 <span
class="math inline">\(&gt;i+1\)</span>
了。所以容斥，枚举一条边也没连的点：</p>
<p><span class="math display">\[g_{x,y,z}=\sum_{i=0}^y(-1)^i\binom
yi\binom{x(y-i)}z\]</span></p>
<p>于是就 dp 完了。</p>
<p>算下时间复杂度：<span class="math inline">\(f\)</span> 和 <span
class="math inline">\(g\)</span>
还有组合数的预处理显然可以忽略掉。转移时，可以发现 <span
class="math inline">\(i,j,k,l,o\)</span> 都是 <span
class="math inline">\(O(n)\)</span>，<span
class="math inline">\(m\)</span> 和 <span
class="math inline">\(p\)</span> 是 <span
class="math inline">\(O(n^2)\)</span>，所以总复杂度为 <span
class="math inline">\(O(n^9)\)</span>。</p>
<p>这东西一看就带着一个几百分之一的常数，写的精细一点就过了。</p>
<h2 id="code">Code</h2>
<p>（3.11s/87mb）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author: YE Minghan</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PB emplace_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PPB pop_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(Name) Name.begin(),Name.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GI greater<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> n,MOD;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][N][N&lt;&lt;<span class="number">1</span>][N][N*N&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> C[N*N&gt;&gt;<span class="number">1</span>][N*N&gt;&gt;<span class="number">1</span>],f[N][N][N*N&gt;&gt;<span class="number">1</span>],g[N][N][N*N&gt;&gt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">//	int _;cin&gt;&gt;_;while(_--)</span></span><br><span class="line"></span><br><span class="line">	cin&gt;&gt;n&gt;&gt;MOD;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n*n&gt;&gt;<span class="number">1</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;n;x++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;y&lt;=n-x;y++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> z=y;z&lt;=x*y;z++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=y&amp;&amp;(y-i)*x&gt;=z;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="type">int</span> t=<span class="number">1ll</span>*C[y][i]*C[(y-i)*x][z]%MOD;</span><br><span class="line">					g[x][y][z]=(g[x][y][z]+(i&amp;<span class="number">1</span>?MOD-t:t))%MOD;</span><br><span class="line">				&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;n;x++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> y=<span class="number">0</span>;y&lt;=n-x;y++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> z=y,t=y*(y<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>;z&lt;=x*y+t;z++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">max</span>(<span class="number">0</span>,z-x*y);i&lt;=<span class="built_in">min</span>(t,z);i++)</span><br><span class="line">					f[x][y][z]=(f[x][y][z]<span class="number">+1ll</span>*C[t][i]*g[x][y][z-i])%MOD;</span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">1</span>][N<span class="number">+1</span>][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=N-j;k&lt;=N+j;k++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=j-i;l++)</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> m=j<span class="number">-1</span>;m&lt;=j*(j<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>;m++)</span><br><span class="line">						dp[<span class="number">0</span>][j][k][l][m]=dp[<span class="number">1</span>][j][k][l][m],dp[<span class="number">1</span>][j][k][l][m]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=N-j;k&lt;=N+j;k++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=j-i;l++)</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> m=j<span class="number">-1</span>;m&lt;=j*(j<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>;m++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="type">int</span> cr=dp[<span class="number">0</span>][j][k][l][m];</span><br><span class="line">						<span class="keyword">if</span>(!cr)<span class="keyword">continue</span>;</span><br><span class="line">						<span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;=n-j;o++)</span><br><span class="line">							<span class="keyword">for</span>(<span class="type">int</span> p=o;p&lt;=l*o+(o*(o<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>);p++)</span><br><span class="line">							&#123;</span><br><span class="line">								<span class="type">int</span> &amp;nxt=dp[<span class="number">1</span>][j+o][k+(i&amp;<span class="number">1</span>?o:-o)][o][m+p];</span><br><span class="line">								nxt=(nxt<span class="number">+1ll</span>*C[n-j][o]*f[l][o][p]%MOD*cr)%MOD;</span><br><span class="line">							&#125;</span><br><span class="line">					&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&lt;=n*(n<span class="number">-1</span>)&gt;&gt;<span class="number">1</span>;i++)</span><br><span class="line">		cout&lt;&lt;dp[<span class="number">1</span>][n][N][<span class="number">0</span>][i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>solutions</category>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>(P+N)WC 2025 旅游记</title>
    <url>/2025/01/21/P-N-WC-2025/</url>
    <content><![CDATA[<h2 id="part.-0">Part. 0</h2>
<h3 id="section">1.12</h3>
<p>到达了 <del>浙 D 市</del> 绍兴市。</p>
<p>晚上 arc190，D 题编出来思路了但是细节没想对。喜提 rk76。</p>
<h3 id="section-1">1.13</h3>
<p>参观了鲁迅故里。</p>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/25st41pp.png" /></p>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/kkn5qhdv.png" /></p>
<p><span class="math display">\[\scriptsize\textsf{Fig. 1/2
鲁迅故居}\]</span></p>
<blockquote>
<p>不必说碧绿的菜畦，光滑的石井栏，高大的皂荚树，紫红的桑椹；……</p>
</blockquote>
<p><del>擦，怎么扯到 whk 上面去了。</del></p>
<h2 id="part.-1-pkuwc">Part. 1 PKUWC</h2>
<h3 id="day-1">1.14 / day 1</h3>
<p>开场。先看 A，这题我以前研究过 <span
class="math inline">\(a=b\)</span> 的 case 啊？蒙了个式子就过了。</p>
<p>看 BC。B 这看着是大 DS，C 这看着是大 SG 啊。</p>
<p>B 先转成了一坨带修二维数点，怼着 <span class="math inline">\(\mathcal
O(n\log^3 n+q\log^2 n)\)</span> 死活优化不下去。</p>
<p>最后还是想了一坨分块套回滚莫队套链表 <span
class="math inline">\(\mathcal O(n\sqrt q+q\sqrt n)\)</span>
才敢写了。过了。</p>
<p>然后 C 试图想 AB 性质无果，于是 <span
class="math inline">\(20\)</span> 分走人。</p>
<p><span class="math inline">\(100+100+20=220\)</span>。（还行。）</p>
<p>晚上 whk 去了。</p>
<h3 id="day-2">1.15 / day 2</h3>
<p>开场。把 ABC 都看了一遍。A 是神秘交互题，B 是神秘最优化，C
是神秘数论题。</p>
<p>先给 C 题瞎写了点 dp，在 1h 时获得了 <span
class="math inline">\(44\)</span> 分，然后把 C 扔了。</p>
<p>这 B 题除了 <span class="math inline">\(c=1\)</span> 的 <span
class="math inline">\(11\)</span> 分看着很不可做啊……先去开 A 了。</p>
<p>然后……</p>
<p>在 3.5h 时才获得了 <span class="math inline">\(56\)</span> 分。</p>
<p>然后写了 B 题 <span class="math inline">\(11\)</span> 分。</p>
<p>然后把 A 题优化到了 <span class="math inline">\(70\)</span> 分。</p>
<p>然后……</p>
<p><span
class="math inline">\(70+11+44=125\)</span>。（你这打得什么几把啊？？？noip
2024 没考吗？？？怎么又又又死怼着一个题想啊？？？）</p>
<p>出来发现 B 题人均分是 <span
class="math inline">\([73,100]\)</span>。</p>
<blockquote>
<p>这 B 题除了 <span class="math inline">\(c=1\)</span> 的 <span
class="math inline">\(11\)</span> 分看着很不可做啊……</p>
</blockquote>
<p>打了三次
PKU*C，每次都写了一个分块（d2t3；d2t2；d1t2），每次都有一个题把我创飞（d2t3；d1t1；d2t1）。</p>
<p>晚上仍然在 whk。</p>
<h2 id="part.-32">Part. 3/2</h2>
<h3 id="section-2">1.16</h3>
<p>啥也没干。</p>
<h2 id="part.-2-noiwc">Part. 2 NOIWC</h2>
<h3 id="registration-day">1.17 / registration day</h3>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/ntm1u39a.png" /></p>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/ugaiwfce.png" /></p>
<p><span class="math display">\[\scriptsize\textsf{Fig. 3/4
绍兴一中龙山书院}\]</span></p>
<p>宿舍房号是 6518。成员：zhr, yfx, ymh, yzn。（年级分别是
8/9/10/11）</p>
<p>拍合照时被 drc
等介绍了图寻。<del>正好我已经熟背全国车牌歌</del>，于是欣然入坑。</p>
<p>饭非常好吃！</p>
<p>晚上开幕式。只记得 dzd 讲话的时候盯着晋国大臣笑不活了（</p>
<h3 id="lecture-day-1">1.18 / lecture day 1</h3>
<p>怎么起床铃是《一剪梅》。豪庭！</p>
<p>上午是 zky 的随机化。一车子人在要签名。感觉 rand 的力量很震撼！</p>
<p>下午是 sjy 的图连通性。有点掉线了 T_T</p>
<p><del>晚上忘了在干啥。</del> 哦原来在打 ABC。G
题访问负数下标调半天，最后 98:49 极限 AK，别的忘了。</p>
<h3 id="lecture-day-2">1.19 / lecture day 2</h3>
<p>《一剪梅》豪庭！</p>
<p>后面的讲课基本都在半在线听课，或者在水群，或者在图寻，或者在
graphomata，或者在看其他人干上述之类的事情。</p>
<p>中午和晚上好像在摆。</p>
<p>哦哦对了拿到了密码条。<del>诶 WC 丢这玩意是扣几分来着？</del></p>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/c94rmdoj.png" /></p>
<p><span class="math display">\[\scriptsize\textsf{Fig. 5
密码条}\]</span></p>
<h3 id="contest-veriaty-show-day">1.20 / contest &amp; veriaty show
day</h3>
<p>《一剪梅》豪庭！</p>
<p>八点多去试机。求你别放 noip 2024 了行吗？？？？？几乎啥也没写。</p>
<p>旁边居然是 QH 老哥。看起来心态非常的好。</p>
<p>试机后到再次进场前一直在考场外随机游走，单向 / 双向面积了 <span
class="math inline">\(\mathcal O(1)\)</span> 个人，再次进场。</p>
<p>开 A，看着像 case work 题。啊编出了充要条件。写。selfeval，怎么 <span
class="math inline">\(65\)</span> 分？哦哦原来没
<code>sort</code>，改完过了。</p>
<p>开 B，这什么玩意？加法踩 xor 上天？还要构造 <span
class="math inline">\(m\)</span> 种方案？先看 C。</p>
<p>开 C，看着像不可做题。</p>
<p>先想点部分分：诶我 C 怎么会 <span class="math inline">\(\mathcal
O(nV)\)</span> dp 了？离散化一下不成 <span
class="math inline">\(\mathcal O(n^2)\)</span>
了？半信半疑地写了下，过了 selfeval。</p>
<p>WC 的 C 题我是能轻松会 <span class="math inline">\(40\)</span>
的？</p>
<p>诶不是等等，这真不是上个线段树就完了吗？想了半天想不出问题，于是不信全疑地开写，心想就写一下让我死心就得了。</p>
<p>调了半天，过样例了，上 selfeval 一测，<span
class="math inline">\(100\)</span> 分？！</p>
<p>WC 的 C 题是能满分的？</p>
<p>不过跑了 1.8s，卡常无果，心想 <span class="math inline">\(85\)</span>
不是也赢麻了？开 B！</p>
<p>想了个从高到低位贪心，发现有种 case 有点困难，但是 AB
性质都能做，还可以构造一种方案，写完整整有 <span
class="math inline">\(50\)</span> 分，此时才 3.5h，心想这不是稳 Au
了？</p>
<p>然后就开始有点浪了，怒写了几个搜索，有几个假了，剩下一个 <span
class="math inline">\(5\sim 7\)</span> 个点死活 TLE，于是在最后 1.5h
怒砍下了 <span class="math inline">\(2\sim 4\)</span> 个点的构造，整整
<span class="math inline">\(6\)</span> 分！</p>
<p><span class="math inline">\(100+56+100=256\)</span>。</p>
<p>出场听说 lch <span class="math inline">\(234\)</span>，drc <span
class="math inline">\(262\)</span>，OU <span
class="math inline">\(264\)</span>，想想也不赖！</p>
<p>复查的时候一直在念「C 别卡我常，C
别卡我常，时间空间都别卡……」。事实上一分也没有挂。</p>
<p>晚上就是文艺汇演了。观赏了 OU，lch，Daniel，251Sec
四位老师的排练。</p>
<p>看到了
grg，cfz，矩阵群，irris，三叉树等老师们的精彩表演。有几首歌唱的很好听，听到了很多
ioiwc 风格的歌曲，相声，nvcesuo，还看到了 SkyWave 老师的影子。</p>
<p>总之就是全世界 OIer 文艺上升葛立恒数倍而我不变。</p>
<p>晚上 CF 没打。去了 drc 和 lch 他们寝室开。</p>
<h3 id="lecture-day-3">1.21 / lecture day 3</h3>
<p>《一剪梅》豪庭！</p>
<p>不知啥时候开始循环播放《一剪梅》。</p>
<p>听说 Au 线 <span class="math inline">\(258\)</span>。吓飞了。</p>
<h3 id="lecture-day-4">1.22 / lecture day 4</h3>
<p>《一剪梅》豪庭！</p>
<p>晚上 div.2 阳间场乱序开题 AK 了。</p>
<h3 id="closing-day">1.23 / closing day</h3>
<p>没听到《一剪梅》起床铃。</p>
<p>早上答辩没去听。</p>
<p>下午闭幕式。实锤 Ag 了。后面坐了 ANIG 和 jager59。有个老哥加了我
QQ。</p>
<p>晚上继续打摆，就睡觉去了。</p>
<h3 id="leaving-day">1.24 / leaving day</h3>
<p>还是结束了啊。</p>
<p>也算凑齐了 WC APIO NOI 各一次。</p>
<p>也许我最终也会空着手退役，但是，谁知道呢？高兴就好！</p>
<p>再见，绍兴！</p>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/6stgp2ok.png" /></p>
<hr />
<p>获得成就：</p>
<ul>
<li>【Graphomata 玩家怎么你了】</li>
<li>【图寻玩家怎么你了】</li>
<li>【平方数】</li>
<li>【线卡 II】</li>
<li>【饮料雪碧爱好者】</li>
<li>【文艺汇演 I】</li>
<li>【第一课堂的拥护者】</li>
<li>【空腹 I】</li>
<li>【卷王】</li>
<li>【不睡神 I】</li>
</ul>
]]></content>
      <categories>
        <category>游记</category>
        <category>2024-2025</category>
      </categories>
  </entry>
  <entry>
    <title>GDOI 2025 失败记</title>
    <url>/2025/03/03/GDOI-2025-Loser-GG/</url>
    <content><![CDATA[<p>前传：<a
href="https://yeminghan2021.github.io/2024/11/24/NOIP-2024/">NOIp
炸成废墟了</a>，GD 高中 rk
83。省选大概得翻八九十分或者一百分什么的。</p>
<h2 id="day--inf">Day -INF</h2>
<p>省选集训。</p>
<p>模拟赛不知为啥打得非常超标，好几次说自己是人均分结果出来发现是 rk
1。也有几场打得很烂。</p>
<blockquote>
<p>打得好就是 NB 上天了，打得不好就是题出的有问题。—— jiangly</p>
</blockquote>
<h2 id="day--inf-1">Day -inf</h2>
<p>中间有几天去了 WC。拿了个 Ag 首部。</p>
<blockquote>
<p>丢掉的 Au 在 NOI 上拿回来。—— lzx</p>
</blockquote>
<h2 id="day--2">Day -2</h2>
<p>回家了。</p>
<h2 id="day--1">Day -1</h2>
<p>打了 HB 省选模拟同步赛。T1 想了 3h 才会 <span
class="math inline">\(\mathcal O(n\sqrt n\log
n)\)</span>，但是发现跑得很快，写完就扔了。T3 发现暴力换根有 <span
class="math inline">\(55\)</span> 分，写完发现写多了一只 <span
class="math inline">\(\log\)</span>，于是改了一下去掉了，<strong>然后忘了测大样例</strong>。然后感觉
T2 暴力写不完了，结果说 T2 样例错了延了 1h，于是就……写完了……</p>
<p>出分发现 T3 爆成 <span class="math inline">\(0\)</span>
了，一测大样例发现 WA 光了。<strong><em>警钟敲烂</em></strong>。</p>
<h2 id="day-0">Day 0</h2>
<p>报到。</p>
<p>考号是 <code>GD-082</code>。</p>
<p>试机发现机子上有超级强大的 VScode，甚至有好用的 C/C++ 插件和 code
runner。必须五星好评！</p>
<p>练习了一下写拍子。</p>
<p>收到了 @<a
href="https://www.luogu.com.cn/user/679936">sunkuangzheng</a> 的 CF
验题邀请，晚上开了
VP。做了【数据删除】个题。感觉【数据删除】很【数据删除】。</p>
<h2 id="day-1">Day 1</h2>
<p>8:27 <code>keeP*drEAm&amp;iNg</code>。</p>
<p>8:45 这 A 不是排个序扫一遍没了吗？</p>
<p>9:00 通过 A 的大样例。</p>
<p>9:?? 胡出了 B 题的一个 <span class="math inline">\(\mathcal
O(\frac{nm+q\log w}w+q\sqrt n)\)</span> 的做法。感觉有点高，于是开始手写
bitset。</p>
<p>10:?? 写完了。调。</p>
<p>11:00 过大样例，发现只跑了 1.7s。造了组极限，跑了 1.9s。上 NOI
linux，跑了 3s 多。测了下空间和 UB，开始看 C。</p>
<p>11:30 根据猜的结论编出了一个 <span class="math inline">\(\mathcal
O(n^3)\)</span> 的搜索，但极其难写。</p>
<p>12:30 放弃了对其的调试。试图写暴力。发现自己似乎胡出了树的做法。</p>
<p>12:50 发现树假掉了。继续试图写暴力。</p>
<p>12:56 未能写完 C 题暴力。</p>
<hr />
<p><span class="math display">\[100+100+0=200\]</span></p>
<p>出来听说 lch <span class="math inline">\(200\)</span>，drc <span
class="math inline">\(240\)</span>，yjl <span
class="math inline">\(300\)</span>，感觉自己打出了低于大众分。</p>
<p>但是水群的时候发现好像会 B 的人没有那么多，但是有一些人会 C 题 <span
class="math inline">\(52\)</span> 分。然后发现 B
题评了个黑？我是能赛场切黑题的？！</p>
<p>然后听说 B 题的 <span class="math inline">\(\mathcal O(nq)\)</span>
可能获得 <span class="math inline">\([20,100]\)</span> 分。</p>
<p>当时感觉自己翻回来了一点。</p>
<h2 id="day-2">Day 2</h2>
<p>8:27 <code>ReM#Ain(LoVinG</code>。</p>
<p>8:45 A 胡出了正解，先写了个暴力。</p>
<p>8:55 开始写正解。</p>
<p>9:20 过大样例。</p>
<p>9:30 拍上了 A 题。开始想 B。哟这不是我们的 DAG 容斥吗？我来编一编 C
性质先。</p>
<p>11:30 放弃冲 B 题。</p>
<p>12:10 写完 B 题暴力，开始想 C。</p>
<p>12:30 开始写 C 题爆搜。</p>
<p>12:40 写完。</p>
<hr />
<p><span class="math display">\[100+24+8=132\]</span></p>
<p>出乎意料的是大众分似乎是 <span
class="math inline">\([132,156]\)</span>
什么的。但反正进队是没希望了。</p>
<p>异域征了。</p>
<p>羡慕队爷啊。</p>
<p>不知是不是 <span class="math inline">\([\text{NOI 2024},\text{CSP
2024}]\)</span>
这段时间内打比赛打得太超标了，那段时间总是有一种「进队十拿九稳」的感觉。</p>
<p>noip 爆完状态就开始急剧下降，一天睡 ~7h 成了常态，每天起床启动期有
~1h。感觉开始越来越摆，水的时长越来越多，模拟赛打得越来越烂。那时也总是在幻想自己如何如何翻进省队并在
NOI 中拿到 Au。</p>
<p>如果要继续的话，希望能暂时放下这段沉重的历史，尽力在最后一年打出让自己满意的成绩吧。</p>
<p>也祝所有进队的、没进队的、退役的、继续的 OIer
们，都<strong>能过上自己想要的生活</strong>。</p>
]]></content>
      <categories>
        <category>游记</category>
        <category>2024-2025</category>
      </categories>
  </entry>
  <entry>
    <title>[ARC195E] Ramdom Tree Distance</title>
    <url>/2025/03/25/ARC195E-Ramdom-Tree-Distance/</url>
    <content><![CDATA[<p>好像大家都在推 <span
class="math inline">\(\operatorname{lca}\)</span>
深度固定什么的，这篇题解来个比较粗暴的推法。</p>
<hr />
<p>首先你考虑直接 dp：对于 <span
class="math inline">\(i&lt;j\)</span>，令 <span
class="math inline">\(f(i,j)\)</span> 表示 <span
class="math inline">\(i\)</span> 和 <span
class="math inline">\(j\)</span> 的期望距离。</p>
<p>这里我们将 <span class="math inline">\(j\)</span>
不断地跳父亲，直到跳到 <span class="math inline">\(\le i\)</span>
的点。</p>
<p>那么贡献变成了两部分：</p>
<ul>
<li>编号 <span class="math inline">\(&gt;i\)</span> 的贡献：显然 <span
class="math inline">\(a_j\)</span> 一定有贡献。考虑 <span
class="math inline">\(a_k\;(i&lt;k&lt;j)\)</span>，其当且仅当曾经跳到过
<span class="math inline">\(k\)</span>
时产生贡献。那么这个等价于「第一次跳到 <span class="math inline">\(\le
k\)</span> 的点时恰好跳到了 <span
class="math inline">\(k\)</span>」，这个概率显然是 <span
class="math inline">\(\dfrac1k\)</span>，所以期望贡献是 <span
class="math inline">\(\dfrac{a_k}k\)</span>。</li>
<li>编号 <span class="math inline">\(\le i\)</span> 的贡献：如果最后跳到
<span class="math inline">\(i\)</span> 就是 <span
class="math inline">\(0\)</span>，否则跳到 <span
class="math inline">\(k\;(k&lt;i)\)</span> 就是 <span
class="math inline">\(f(k,i)\)</span>。</li>
</ul>
<p>所以有转移方程：</p>
<p><span
class="math display">\[f(i,j)=a_j+\left(\sum_{k=i+1}^{j-1}\frac{a_k}k\right)+
\left(\frac1i\sum_{k=1}^{i-1}f(k,i)\right)\]</span></p>
<p>你发现最后面那坨和 <span class="math inline">\(j\)</span>
完全没关系，那么可以考虑将 <span class="math inline">\(j\)</span>
这一维去掉。</p>
<p>观察 <span class="math inline">\(f\)</span> 在 <span
class="math inline">\(j\)</span> 这一维的差分：</p>
<p><span
class="math display">\[f(i,j)-f(i,j-1)=a_j-\frac{j-2}{j-1}a_{j-1}\]</span></p>
<p>你发现这玩意只跟 <span class="math inline">\(j\)</span>
有关，不妨记为 <span class="math inline">\(C_j\)</span>。另外这个式子在
<span class="math inline">\(j\ge i+2\)</span> 时成立，所以有：</p>
<p><span
class="math display">\[f(i,j)=f(i,i+1)+\sum_{k=i+2}^jC_k\]</span></p>
<p>现在 <span class="math inline">\(f\)</span> 里面已经没有 <span
class="math inline">\(j\)</span> 了，那么令 <span
class="math inline">\(F_i=f(i,i+1)\)</span>：</p>
<p><span
class="math display">\[\begin{aligned}F_i&amp;=a_i+\frac1i\sum_{k=1}^{i-1}f(k,i)\\
&amp;=a_i+\frac1i\sum_{k=1}^{i-1}\left(F_k+\sum_{l=k+2}^iC_l\right)
\\&amp;=a_i+\frac1i\left[\left(\sum_{k=1}^{i-1}F_k\right)+\left(\sum_{l=3}^i\sum_{k=1}^{l-2}C_l\right)\right]
\\&amp;=a_i+\frac1i\left[\left(\sum_{k=1}^{i-1}F_k\right)+\left(\sum_{l=3}^i(l-2)\cdot
C_l\right)\right]\end{aligned}\]</span></p>
<p>那么你发现后面的两个求和都可以边求边推，所以 <span
class="math inline">\(F\)</span> 就可以 <span
class="math inline">\(\mathcal O(n)\)</span> 求出了。</p>
<p>那你每次询问就是一个 <span class="math inline">\(F\)</span> 值加一段
<span class="math inline">\(C\)</span> 的和（再乘一个 <span
class="math inline">\((n-1)!\)</span>，因为是求和），可以 <span
class="math inline">\(\mathcal O(1)\)</span> 求出。</p>
<p>于是做完了。时间复杂度 <span class="math inline">\(\mathcal
O(n+q)\)</span>。</p>
<p>代码很短。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author: YE Minghan</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PB emplace_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PPB pop_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(Name) Name.begin(),Name.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GI greater<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>,MOD=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n,q,a[N];</span><br><span class="line"><span class="type">int</span> inv[N],tfc;</span><br><span class="line"><span class="type">int</span> f[N],s[N],ss[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">//	int _;cin&gt;&gt;_;while(_--)</span></span><br><span class="line"></span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q,inv[<span class="number">1</span>]=tfc=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)cin&gt;&gt;a[i],a[i]%=MOD,inv[i]=<span class="number">1ll</span>*(MOD-MOD/i)*inv[MOD%i]%MOD,tfc=(i<span class="number">-1ll</span>)*tfc%MOD;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)ss[i]=(ss[i<span class="number">-1</span>]+(s[i]=(a[i]+(MOD-i<span class="number">+2ll</span>)*a[i<span class="number">-1</span>]%MOD*inv[i<span class="number">-1</span>])%MOD))%MOD;</span><br><span class="line">	<span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i]=(<span class="number">1ll</span>*t*inv[i]+a[i<span class="number">+1</span>])%MOD;</span><br><span class="line">		t=(t+(i<span class="number">-1ll</span>)*s[i<span class="number">+1</span>]+f[i])%MOD;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(q--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x,y;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		cout&lt;&lt;<span class="number">1ll</span>*tfc*(<span class="number">0ll</span>+f[x]+(ss[y]-ss[x<span class="number">+1</span>]+MOD))%MOD&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>solutions</category>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>[ABC400G] Patisserie ABC 3</title>
    <url>/2025/04/05/ABC400G-Patisserie-ABC-3/</url>
    <content><![CDATA[<h2 id="statement">Statement</h2>
<p>给定正整数 <span class="math inline">\(n,k\)</span> 和 <span
class="math inline">\(n\)</span> 个三元组 <span
class="math inline">\((x_i,y_i,z_i)\)</span>。</p>
<p>现要选出 <span class="math inline">\(k\)</span> 个二元组 <span
class="math inline">\((a_i,b_i)\)</span>，满足每个位置只能出现一次，并要求最大化：</p>
<p><span
class="math display">\[\sum_{i=1}^k\max\{x_{a_i}+x_{b_i},y_{a_i}+y_{b_i},z_{a_i}+z_{b_i}\}\]</span></p>
<p>输出这个最大值。</p>
<p>Data range：<span class="math inline">\(T\)</span> 组多测，<span
class="math inline">\(\sum n\le 10^5\)</span>，<span
class="math inline">\(2k\le n\)</span>，<span class="math inline">\(0\le
x_i,y_i,z_i\le 10^9\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>首先你考虑每个数对答案的贡献。你发现每种数（指 <span
class="math inline">\(x,y,z\)</span>）的贡献都是成对的，所以肯定要求数量都是偶数。</p>
<p>而你发现偶数是充要的（两两配对就行，如果实际上不是这种数产生贡献那也肯定不是最优解），那么问题转化成了：</p>
<blockquote>
<p>对于每个 <span class="math inline">\(i\)</span> 可以选 <span
class="math inline">\(x_i\)</span>、选 <span
class="math inline">\(y_i\)</span>、选 <span
class="math inline">\(z_i\)</span> 或什么都不选，要求一共选 <span
class="math inline">\(2k\)</span>
个，且每种数都要选偶数个，求最大和。</p>
</blockquote>
<p>这里就有了一个 <span class="math inline">\(\mathcal O(nk)\)</span>
的做法了，就是 dp 记一下前 <span class="math inline">\(i\)</span>
个里选了 <span class="math inline">\(j\)</span> 个，<span
class="math inline">\(x,y,z\)</span> 分别有奇数/偶数个的最大和。</p>
<p>当然这是过不了的，考虑优化。</p>
<p>你发现偶数这个限制很松，即使不符合稍微调一下也能符合。</p>
<p>那你考虑按 <span class="math inline">\(\max\{x_i,y_i,z_i\}\)</span>
从大到小排序。</p>
<p>然后会有一个结论：最终方案中，前 <span
class="math inline">\(2k\)</span>
个里面最多有两个不选（被调整成后面的至多两个，注意前面的选了并<strong>不</strong>一定是最大的那个）。</p>
<blockquote>
<p>证明：</p>
<p>假设前面的有三个没选，那么对应的后面会选了三个。</p>
<p>我们称一个前面的没选的 <span class="math inline">\(x_i\)</span>
最大的位置为 <span class="math inline">\(\texttt X\)</span> 类，<span
class="math inline">\(\texttt Y,\texttt Z\)</span> 类同理；后面的选了
<span class="math inline">\(x_i\)</span> 的位置为 <span
class="math inline">\(\texttt x\)</span> 类，<span
class="math inline">\(\texttt y,\texttt z\)</span> 类同理。</p>
<p>那么：</p>
<ol type="1">
<li>显然不可能同时出现 <span class="math inline">\(\texttt X,\texttt
x\)</span> 类，因为可以直接替换掉，其他的同理。</li>
<li>也不可能同时出现两个 <span class="math inline">\(\texttt X\)</span>
类和两个 <span class="math inline">\(\texttt y\)</span>
类：也可以直接替换。</li>
</ol>
<p>之后简单分讨一下就可以证明该命题。</p>
</blockquote>
<p>那么接下来就简单了：对前 <span class="math inline">\(2k\)</span>
个和后面 <span class="math inline">\((n-2k)\)</span> 个分别
dp，那么「选了几个」的维度就被压缩到了 <span
class="math inline">\(3\)</span>
的长度（对于前面可以记不选了几个），那么 dp 的复杂度就降到了 <span
class="math inline">\(\mathcal O(n)\)</span>。</p>
<p>于是就在 <span class="math inline">\(\mathcal O(n\log n)\)</span>
的时间复杂度内解决了本题，瓶颈在于排序。</p>
<ul>
<li>本题只有 <span class="math inline">\(x,y,z\)</span>
三维，但实际上可以扩展到 <span class="math inline">\(m\)</span>
维的情况。此时可以证明前面至多 <span
class="math inline">\((m-1)\)</span> 个被替换成后面的，所以可以在 <span
class="math inline">\(\mathcal O(n\log n+nm^22^m)\)</span>
的时间复杂度内解决（注意转移带一个 <span
class="math inline">\(m\)</span>）。</li>
</ul>
<h2 id="code">Code</h2>
<p>32ms/14MB</p>
<p>截至现在它还是并列最优解。<del>注意到有个 31ms
的代码与此代码编辑距离为 <span
class="math inline">\(0\)</span>。小朋友素质无敌了。</del></p>
<p><a
href="https://atcoder.jp/contests/abc400/submissions/64533700">Submission
link</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author: YE Minghan</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;templates/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dbg(...) (void)0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> here (void)0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PB emplace_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PPB pop_back</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALL(Name) Name.begin(),Name.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VI vector<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GI greater<span class="string">&lt;int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100005</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line">array&lt;<span class="type">int</span>,3&gt;a[N];</span><br><span class="line">ll dp[N][<span class="number">12</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ck</span><span class="params">(ll &amp;x,ll y)</span></span>&#123;x=<span class="built_in">max</span>(x,y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="type">int</span> _;cin&gt;&gt;_;<span class="keyword">while</span>(_--)</span><br><span class="line">&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)cin&gt;&gt;a[i][j];</span><br><span class="line">	<span class="built_in">sort</span>(a<span class="number">+1</span>,a+n<span class="number">+1</span>,[](<span class="keyword">auto</span> x,<span class="keyword">auto</span> y)&#123;<span class="keyword">return</span> <span class="built_in">max</span>(&#123;x[<span class="number">0</span>],x[<span class="number">1</span>],x[<span class="number">2</span>]&#125;)&gt;<span class="built_in">max</span>(&#123;y[<span class="number">0</span>],y[<span class="number">1</span>],y[<span class="number">2</span>]&#125;);&#125;);</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">0xc0</span>,<span class="number">8</span>*<span class="number">12</span>*(n<span class="number">+3</span>));</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>]=dp[n<span class="number">+1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k&lt;&lt;<span class="number">1</span>;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">12</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">ck</span>(dp[i][j],dp[i<span class="number">-1</span>][j]+a[i][<span class="number">0</span>]);</span><br><span class="line">			<span class="built_in">ck</span>(dp[i][j^<span class="number">1</span>],dp[i<span class="number">-1</span>][j]+a[i][<span class="number">1</span>]);</span><br><span class="line">			<span class="built_in">ck</span>(dp[i][j^<span class="number">2</span>],dp[i<span class="number">-1</span>][j]+a[i][<span class="number">2</span>]);</span><br><span class="line">			<span class="keyword">if</span>(j&lt;<span class="number">8</span>)<span class="built_in">ck</span>(dp[i][j<span class="number">+4</span>],dp[i<span class="number">-1</span>][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;k&lt;&lt;<span class="number">1</span>;i--)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">12</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(j&lt;<span class="number">8</span>)<span class="built_in">ck</span>(dp[i][j<span class="number">+4</span>],dp[i<span class="number">+1</span>][j]+a[i][<span class="number">0</span>]);</span><br><span class="line">			<span class="keyword">if</span>(j&lt;<span class="number">8</span>)<span class="built_in">ck</span>(dp[i][(j<span class="number">+4</span>)^<span class="number">1</span>],dp[i<span class="number">+1</span>][j]+a[i][<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(j&lt;<span class="number">8</span>)<span class="built_in">ck</span>(dp[i][(j<span class="number">+4</span>)^<span class="number">2</span>],dp[i<span class="number">+1</span>][j]+a[i][<span class="number">2</span>]);</span><br><span class="line">			<span class="built_in">ck</span>(dp[i][j],dp[i<span class="number">+1</span>][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)<span class="built_in">ck</span>(ans,dp[k&lt;&lt;<span class="number">1</span>][i]+dp[(k&lt;&lt;<span class="number">1</span>)<span class="number">+1</span>][i]),<span class="built_in">dbg</span>(i,ans);</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>solutions</category>
        <category>AtCoder</category>
      </categories>
  </entry>
  <entry>
    <title>APIO 2025 游记</title>
    <url>/2025/05/17/APIO-2025/</url>
    <content><![CDATA[<h2 id="day-texttt031sim-2">Day <span
class="math inline">\(\texttt{03/1?}\sim-2\)</span></h2>
<p>在 sxz 集训。</p>
<p>noi 模拟赛笑传之场场爆。</p>
<h2 id="day-texttt0419simtexttt0502">Day <span
class="math inline">\(\texttt{04/19}\sim\texttt{05/02}\)</span></h2>
<p>GD 省队集训。<span class="math inline">\(8\)</span> 场模拟赛打了
<span class="math inline">\(7\)</span> 场，只过了 <span
class="math inline">\(4\)</span> 个 T1 和 <span
class="math inline">\(1\)</span> 个 T2。烂完了。</p>
<h2 id="day-texttt0422simtexttt0423">Day <span
class="math inline">\(\texttt{04/22}\sim\texttt{04/23}\)</span></h2>
<p>回学校期中考去了。</p>
<p>六科狂砍 <span
class="math inline">\(71+110+94+51+53+51=430/750\)</span>，无敌了。</p>
<p>OI 一时爽，whk 火葬场。</p>
<h2 id="day--1">Day <span class="math inline">\(-1\)</span></h2>
<p>报道日。领了胸牌等物品。</p>
<p>众所周知 sxz 电资源稀缺，于是机房里多了很多人。</p>
<p>然后一机房人到操场开始踢足球。从 <span
class="math inline">\(12\)</span> 点踢到了快 <span
class="math inline">\(16\)</span>
点，然后因为下雨被老师「蓝牌罚下」了。</p>
<p><del>然后第二天腿酸了一天。</del></p>
<p>晚上试机。和 WC 一样是鞭尸 noip 2024。敲了个 T1 测了下速就润了。</p>
<h2 id="day-0">Day <span class="math inline">\(0\)</span></h2>
<p>讲课日。</p>
<p>上午是图论杂题选讲和图论容斥，其中不乏像
P11834（years）这种场上把我彻底创死的题。这种东西感觉就是我咋学也学不会的。唉。</p>
<p>下午讲的零基础超现实数，前半节挺好玩的，听到 <span
class="math inline">\(*\)</span> 就逐渐掉线了。构造讲了几道经典题。</p>
<p>晚上开摆，到最后感觉太摆了于是打了几个 tarjan 就睡觉了。</p>
<h2 id="day-1">Day <span class="math inline">\(1\)</span></h2>
<p>早上到机房摆了一会。</p>
<p>进场，发现右边的右边是
skz。<del>不知道他有没有看见我</del>。好像并没有。。。T_T</p>
<hr />
<p>10:00 开题，先把文件啥的建好。10:10
把三个题都看了一遍。布什戈门，两交互一构造是什么几把东西？！感觉又要被创飞了。</p>
<p>开始专心想
A，感觉很神秘。这时，广播：「题目是按字典序排的，不是按照难度排序。」</p>
<p>于是开始随机想题。</p>
<p>感觉 B 题有点抽象就跳了，开始想 C。</p>
<p>猜出了结论是有 <span class="math inline">\(\lfloor\frac
n2\rfloor\)</span> 对垂直就取到最大值，然后发现直接极角排序然后依次把
<span class="math inline">\(i\)</span> 转到 <span
class="math inline">\(i+\lfloor\frac n2\rfloor\)</span>
垂直的位置就是对的？！</p>
<p>然后就写出了超级无敌史诗的<strong>一行</strong>核心代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n&gt;&gt;<span class="number">1</span>;i++)<span class="built_in">rotate</span>(&#123;i&#125;,(v[a[i+(n&gt;&gt;<span class="number">1</span>)]]<span class="number">+75000</span>-v[a[i]])%<span class="number">50000</span>);</span><br></pre></td></tr></table></figure>
<p>交上去，诶怎么 <code>Invalid signature</code>？哦原来我
<code>using VI=vector&lt;int&gt;</code> 本地能过编 selfeval
不行。改完直接变成 <span class="math inline">\(100\)</span> 分了，此时是
11:00，于是开始想前两个交互题。</p>
<p>看 A。发现判断是否在 <span class="math inline">\([1,t]\)</span>
内可以</p>
<p><span class="math display">\[\{1,2,\ldots,\sqrt t,2\sqrt
t,\ldots,t+1\}\]</span></p>
<p>然后随便写了个二分发现输入 <span class="math inline">\(10^9\)</span>
需要一百多万的代价，爆了。试图加优化，结果还是连一百万都压不进去。</p>
<p>然后在 AB 之间反复横跳，过了半天发现我的 A 是奶龙！判断是否在 <span
class="math inline">\([l,r]\)</span> 内可以：</p>
<p><span
class="math display">\[\{1,2,\ldots,\sqrt{r-l},l+\sqrt{r-l},l+2\sqrt{r-l},\ldots,r+1\}\]</span></p>
<p>一测，<span class="math inline">\(78\)</span> 分！于是先跳了。</p>
<p>看 B。发现非平凡情况只有链和环。过了一会，会链了，写写写，获得了
<span class="math inline">\(22\)</span> 分。此时是 13:00（？）</p>
<p>然后试图优化 A。把第一次询问卡了一下，得到了 <span
class="math inline">\(86\)</span> 分。此时是 13:30。</p>
<p>冲 B，发现我把环的问题转化成了「有一堆 <span
class="math inline">\(&lt;m-1\)</span> 的数，然后你要凑出尽量多的 <span
class="math inline">\(m\)</span>」，这 tm 不是 NPC 问题吗？！然后看了下
<span class="math inline">\(n\le 400\)</span>
想着是不是什么神秘复杂度，但是这种乱搞我肯定搞不出来，于是试图冲 <span
class="math inline">\(m\le 4\)</span>。（最后发现这个结论在 <span
class="math inline">\(m\ge 4\)</span> 时假完了。。。）</p>
<p>先写 <span class="math inline">\(m=3\)</span>，然后交了大半页的 <span
class="math inline">\(22\)</span> 分，调了半天发现我有个代表 index 的
<span class="math inline">\(0\)</span> 打成 <span
class="math inline">\(1\)</span> 了！！！！！！改完就 <span
class="math inline">\(46\)</span> 了。</p>
<p>然后写 <span class="math inline">\(m=4\)</span>，又交了半页 <span
class="math inline">\(46\)</span>，当然因为是假的所以到最后也没能通过。</p>
<hr />
<p>出来问了 ranker <span class="math inline">\(238\)</span>，太牛了。OU
和小 D 怎么爆炸了。唉。</p>
<p>发现大家的 C 题要么没过要么做法是一坨，然后我突然想到我 C
题的证明好像有 bug！</p>
<p>？！？！不会假了吧？那咋过 pretest 的？？？但我好像又 hack
不掉，所以也有可能是真的？</p>
<p>就这样等到了 16:40，准备去查分。</p>
<p>打开电脑，打开文件夹，点开 pdf，C 题过了，没挂，赢！</p>
<p><span class="math display">\[86+46+100=232\]</span></p>
<p>然后晚上吃饭的时候 ranker 证出来了我的 C 是对的。</p>
<p>……虚惊一场了好吧。</p>
<p>发现大家好像都没有我高，那我是不是要 Au 了？</p>
<p>晚上讲题，C 官解是依托，A 是神秘分治，B 是答奋分讨。</p>
<h2 id="day-2">Day <span class="math inline">\(2\)</span></h2>
<p>上午讲电阻网络什么的。水了 3h。</p>
<p>下午是社会实践，参观了 702 基地。</p>
<p>参观完之后回来又踢了一会球。</p>
<p>晚上闭幕式，诶我怎么坐在第一排了？？而且周围还有好几个认识的人。</p>
<p>证书上面写 19 下面写十八，也是够草台班子了。</p>
<p>晚上去了 3415 宿舍，换到了不少徽章。</p>
<h2 id="day-3">Day <span class="math inline">\(3\)</span></h2>
<p>已经结束了！<del>还有几个失误能等你的？？？</del></p>
<hr />
<p>接下来是随机魔怔时间。</p>
<p>感觉这把纯被随机区分上去的。<del>为啥一到 NOIP
省选就爆爆爆啊？？？？？</del></p>
<p>你说得对，但是我的 CCF 积分达到了 <span
class="math inline">\(\dfrac{5606525}{5696}\approx 984.29\)</span>
分。诶我怎么痛失勾十啊？？？？？</p>
<p>明年 RP 能别这么分布吗？？？咱多给省选分点行不？？？</p>
<p>订了 <span class="math inline">\(20\)</span>
徽章恰好剩了一个。<del>咱这种 I
人能换出去这么多也算超额完成了？</del></p>
<p><img
src="https://cdn.luogu.com.cn/upload/image_hosting/9d5hml9w.png" /></p>
]]></content>
      <categories>
        <category>游记</category>
        <category>2024-2025</category>
      </categories>
  </entry>
</search>
